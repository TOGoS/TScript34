#+TITLE: TScript34.2 development log

Or: A place for random notes and ideas in order not to clutter up the README or whatever.

** [2023-08-27] Flesh out the different paradigms

I seem to keep flitting between 3 main ways of programming.

I wonder if the reason for this is that each one has
a niche to which it is best suited, and I just happen to be trying
to solve problems that span across these different modes.

*** Functional lisp-like languages

- High level of abstraction
- Presumably good for transforming data
- Compilers

*** Command languages, like JCR36

- Medium level of abstraction
- Action based rather than function-based
- Filesystem manipulation
- Scripting

*** Microcode

- Small, simple interpreters
- Minimal language closely linked to VM
- Can act as a lower-level representation of programs
  of either of the other paradigms
- Not very nice for writing programs directly;
  I keep wanting to write compilers, which brings
  me back to the original question

*** High-level stack-based languages like PostScript or TS34.2

- Simultaneously high-level and low-level
- Simplistic syntax for sake of interpreter
- Operations to create objects and do other complex operations
- Intention is to be a common representation of high-ish level programs,
  but being explicitly stack-based makes this somewhat awkward;
  to be useful for representing programs to be translated,
  need to be careful that shape of stack can be known at compile-time.
  Factor and Joy do this.
- A strange animal, now that I think of it
  
*** Which to implement first?

I would like to stop floundering.

But "it probably depends on what I need at any given time"

Perhaps a thing to do is determine the core concepts
around which each paradigm can be built, so that
when I want to do something specific, I already know
where it goes in the system.

I keep thinking that the Lispy language may be the most useful.
Once that works, TCR can have a command to evaluate lispy
expressions, and lispy expressions can be defined to return commands.

- [ ] Flesh out command model
  - command operates on an environment, which includes
    - environment variables
    - input and output streams (possibly more than the usual 3)
    - pwd
- [ ] Flesh out Lispy language
  - [ ] Syntax
  - [ ] Semantics of basic datatypes
    - Use the P0010 model?

** [2024-02-02] Thoughts on meaning of S-expressions, for example

Lisp S-expressions don't have a single, unambiguous 'meaning'.
I think that has made tricky this job of trying to reason about them
in a larger non-lisp-specific context.

A question:
When evaluating an S-expression,
is it the 'eval' function or the expression object itself
(e.g. an atom, or a cons pair, or maybe something else)
that knows how to evaluate S-expresions?
Or, put another way, do we have a special eval function
that knows to interpret a list as a function application,
or a special list that knows to eval itself in that way?
Or do they need to both be special?

Related:
When our 'eval' function is asked to evaluate a cons pair,
what does it see?  Does it see a cons pair?
Does it see it as a sequence that happens to be implemented as a linked list?
Does it see an 'evaluatable' object?
Maybe the answer depends on which evaluate function we're using!
An abstract, general-purpose 'evaluate' ('AGPEval', let's call it)
might require the cons pair (or vector, or whatever) to be wrapped
in another object that somehow indicates what to do with the S-expression.
This may the way to go for TOGVM compatibility.
So then
    AGPEval( SExpression[ Atom("foo"), Atom("Bar") ] )
  = SExpEval[ Atom("foo"), Atom("Bar") ]
  = AGPEval( FunctionApplication{ functionExpr: Variable("foo"), argExprs = [ Variable("bar") ] } )

For TScript34.11 or whatever, would it be cleaner to translate
S-expressions to TOGVM expressions before evaluating them,
to remove the ambiguity?


*** Proposed answers

Lacking context, a cons pair is just a cons pair.

But in different contexts, it can mean different things!
The solution is to be explicit about what context we are in.

In the context of a lisp function that is expecting a linked
list as an argument, the interpretation is implicit.

The purpose of ~net.nuke24.tscript34.p0010.IndirectValue~ is to explicitly
indicate (with the 'tag') the meaning of the value in the context
of a Java program that operates on arbitrary ~Object~s.
In this case, the 'context' is simply that the program is aware
that instances of ~IndirectValue~ can represent something other than
themselves (just as other Java objects do, though often in a more direct way)!

What is the maning of a cons pair in the context of an IndirectValue?

- If tag = QUOTED_LITERAL, then the cons pair (in this case returned by #get()) is just a cons pair!
- If tag = LINKED_LIST, then the cons pair represents a list.
- If tag = 1025, the cons pair represents the concatenation of its
  left and right values
- If tag = EXPRESSION_VALUE, the cons pair...is presumably an S-expression
  to be evaluated to produce some value

I think the reason I'm enfatuated with RDF is that it, too,
provides a general way to talk about arbitrary concepts.


*** Other ambiguoids

~Promise~s in JavaScript.  If a function takes a promise,
will it treat it as referring to the promise's value,
or will it operate on the promise itself?

Should ~typeOf(Promise.resolve(2)).then( console.log )~
print "object" or "number"?

They call this a problem of 'coloring' in the JavaScript world.
Color indicating the implicit meaning of values.
I've always thought it might be nice for a language
to make that explicit, though in languages like C++ with
stack-allocated objects, it's maybe less of a problem because
functions that care about color can just demand that you pass
them a struct that explicitly indicates it.


*** Why is this useful?

Allows us to write functions that operate on arbitrarily-colored values
so that we don't have to have a different function for each
variation of input/output.

Let's say you want to provide a 'concatenate' service.
For simplicity, let's say the result is a byte array,
but that we want to allow inputs to be specified
either directly, or by URI reference.

In this case, having a function accept an `IndirectValue`
as an argument allows the concatenation function to
reason about the inputs in terms of their representation.
If one of the arguments is itself a concatenation,
we could do somethign special ahndajknsdkjn
not a great examnple, but maybe you get the idea.

** [2024-06-05] Brainstorm on operations

Stuck because putting car before horse.

What are some applications and the operations they need?

- CCouch merge tool
  Note that these operations should work whether objects are specified
  by URIReference or otherwise; that is an implementation detail.
  - isBlob      : any -> boolean ; if URIReference, should be able to tell without dereferencing in relevant cases 
  - getPropertyValues : any -> predicate -> List<any>
  - serialize   : any -> any
    - When input is a URI reference of a certain form, this is easy:
      `serialize <x-rdf-subject:urn:bitprint:FOO> = <urn:bitprint:FOO>`
  - car         : List<X> -> X | error
  - cdr         : List<X> -> List<X> | nil
  - name        : any -> string
  - store       : any ->{WritableCCouchRepo} URIReference
  - concat      : blob[] -> blob
  - writeFile   : blob -> filename ->{WritableFilesystem} ()
  - print       : blob ->{StdoutWriter} -> ()
  More complex but well-defined operations:
  - mergeTrees   : MergeStrategy -> List<Tree> -> Tree
  - mergeCommits : MergeStrategy -> List<Commit> -> Commit
  Merge strategies can just be symbols for now.
  .../FirstWins, LastWins, Error
- Photo archiving system
  High-level operations:
  - Generate scaled-down versions of image files
  - Track which files are derived from which others
    Soemthing like: Derivation { sourceUri, ops: [ ... ], savedUri }
    Where 'ops' are Scale{scale}, Rotate{amount}, Quality{quality}
  - Load a list of raw images from....?
  - Show images on the screen
  - Allow user to view different scales of an image,
    rotate them, select which one(s) to archive
  - Maintain a database of the user's
    image view -> archived?, any other metadata

Of those two projects, commit/directory merging
appears much more straightforward - concrete ops are already defined.


** [2024-08-20] Job runner system

I want to run Javac remotely.
Partly because I want to delegate to the JDK 1.6 ~javac~,
partly because it seems conceptually simple enough that
it shouldn't be too difficult.

*** Concept

~resolve(active URI) -> result~

Resolve might run locally or delegate to some web service or something.

(TDAR already does this locally)

*** Floundering

But it's been weeks or months that I've been saying
'building a job runner system shouldn't be too difficult'
and I haven't done it.

Need to either:
- Bypass all that, do this in a simpler way
  (just write a shell script to SSH to the right server,
  run the commands to do a build there, taking the source
  zip as stdin and writing the result to stdout)
- Break the job runner system down into smaller steps,
  start working on those.
