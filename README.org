#+TITLE: TScript34

** Sub-projects

- [[./P0001/][P0001]] :: Java...tokenizer, thing
  - Status: Some unit tests that pass
- [[./P0002/][P0002]] :: C# even-more-simplified interpreter
  - Status: Works; used to implement parts of MapTranslator35
- [[./P0003/][P0003]] :: Test cases
- P0004 :: Some compiler written in Janet, or something
  - Status: ???
- [[./P0005/][P0005]] :: A minimal lisp, implemented in Java
  - Status: incomplete
- [[./P0006/][P0006]] :: Tiny single-class VM challenge
  - Status: Works, but minimally useful
  - A forthlike VM using String[] to store the program
- [[./P0007/][P0007]] :: Demonstration of dynamically generated/loaded class files
  - Status: Concept proved to work.
- [[./P0008/][P0008]] :: Formerly 'Java Command Runner', but its purpose overlaps
  enough with this project, and I already have enough stray Java repos around.
  - Status: does some basic stuff
- [[./P0009/][P0009]] :: Single-class Java implementation of TScript34.2 interpreter
  - Program encoded as int[] with a table of Object[] constants
  - Stack is Object[], with Object[] { SPECIAL_MARKER, tag, ... } used to denote
    non-literal values (i.e. values represented in an indirect way, e.g.
    'value of expression X', '
  - Status: Concept proved, has some unit tests.
  - May be expanded upon to provide more operations,
    though I would still like to keep the core very small,
    so need to come up with some extension mechanism.
- [[./P0010/][P0010]] :: Java classes to formalize schemas
  for 'indirect value' / 'thunk' / 'meaning-tagged value' objects
- [[./P0011/][P0011]] :: Hopefully-more-minimal-than-P0005 lisp-in-Java, because
  I still want one, and P0005 got bogged down with continuation stuff.
- [[./P0012/][P0012]] :: Proof-of-concept Maven library and thing to use it
- [[./P0013/][P0013]] :: CPS-based interpreter demo
- P0014 :: TEF parser java library
- P0015 :: RDF parser java library

** OIDs

- 1.3.6.1.4.1.44868.261.34 :: This project
- 1.3.6.1.4.1.44868.261.34.n :: Sub-project ~t~
- 1.3.6.1.4.1.44868.261.34.10.t :: Indirect value representation ~t~;
  see [[./P0010/src/main/java/net/nuke24/tscript34/p0010/IndirectValueTags.java]]
  for the list of tags!

** Language

I should probably specify it, huh?
With test cases and stuff.

Well, maybe for now it's enough to say that the language
is intended to be compatible with PostScript.
i.e. a program that is valid in either PostScript or in TScript34
should mean the same thing and have the same result in either.
That said, some PostScript programs might not be valid TScript34 programs,
and vice-versa.

*** Common Syntax

Languages aside from the 'syntaxless' TS34.2 (which is line-based)
and PostScript clones (though they may extend the syntax to support line comments)
may share common tokenization rules.

#+BEGIN_SRC
#!/shebang/line
# line comment
#SPECIAL-DIRECTIVE

foo-bar:baz/quux#quuux # Bareword, includinbg some punctuation characters;
                       # Note that '#' only starts a line comment when precedded
		       # by whitespace or the beginning of a line

[abc 123] # Square braces are self-delimiting: `[` `abc` `123` `]`
(asd 123) # So are parentheses
{asd 123} # And so are curly braces, except in TCL-like languages,
          # where they act like nestable double quotes.

# Single and double quotes follow the same tokenization rules

'quoted symbol\n' # Single quotes mean 'treat as a symbol'
                  # (except in Lispy languages, where 'foo means (quote foo)
"quoted string\n" # Double quotes mean literal string

‹hello \ ‹there›› # Nestable symbol quoting without escapes
«hello \ «there»» # Nestable literal quoting without escapes
#+END_SRC

~‹›~ and ~«»~ are called '[[https://en.wikipedia.org/wiki/Guillemet][guillaments]]'.

*** Alternate quote styles

The single and double regular and nestable quotes are the same
characters with the semantics as defined by the TOGVM-PHP language and SchemaSchema.
Other unicode quotes might allow nesting _with_  escape sequences,
or other permutaions of nestable/escapable/supporting interpolations or not
(see https://github.com/TOGoS/TOGVM-Spec/blob/master/test-vectors/tokens/quotes.txt).

However, that seems to lead to some ambiguity:
at which level are the escapes decoded?
The answer is probably: at the outermost quotation,
since that is the most straightforward.
But that might seem surprising and/or not the most useful
interpretation to someone writing with them.
Therefore I am punting by simply disallowing them, for now.
The following quote characters should be reserved;
i.e. recoignized but unsupported (for now):

#+BEGIN_SRC
`backticks`
‘nestable single quotes’
“nestable double quotes”
「Japanese single quote」
『Japanese double quote』
〈Japanese angle quote〉
《Japanese double-angle quote》
【Whatever this is】
〔This other one〕
〖More crazy unicode quotes〗
〘Yet more of them!〙
〚Holy crap, so many weird quote characters〛
#+END_SRC

(the last few were simply copied from
https://en.wikipedia.org/wiki/CJK_Symbols_and_Punctuation
for completeness; I have never thought about
using them or what they would mean)

** FAQ

*** What the %!&*@ is this?

A collection of projects, some entirely experimental, that are vaguely related
in that they share the goal of defining minimal, cross-platform programming language
interpreters, VMs, or compilers.

*** PostScript?

Some of the sub-projects attempt to define or implement
a small PostScript-based language specification.

The goal is to have a very easy-to-implement cross-platform core
that can bootstrap nicer languages (e.g. scheme, more fleshed-out PostScript, etc).

**** Why PostScript and not Forth, Scheme, TCL ...

Being a concatenative stack-based language means very little 'parsing'
is needed; tokens are tokenized and fed directly to the interpreter.

Feel free to implement higher-level languages using TScript34.
Actually that's kind of its purpose.

PostScript seems like a more elegant language than Forth, with '{ procedures }'
as first-class objects, somewhat more conventional operation names,
symmetrical string syntax '(foo)' instead of '" foo"', and fewer assumptions
that it is running very close to the metal.

*** Other languages/VMs to consider implementing

**** WebAssembly

Might be slightly less 'minimal' than what I'm going for, here,
though admittedly I haven't tried it.

TODO: Read https://www.javaadvent.com/2022/12/webassembly-for-the-java-geek.html

It is compelling.

**** [[https://100r.co/site/uxn.html][UXN]]

#+BEGIN_QUOTE
The Uxn/Varvara ecosystem is a personal computing stack
based on a small virtual machine that lies at the heart of our software,
and that allows us to run the same application on a variety of systems.
#+END_QUOTE

Sounds very similar to what I'm going for,
so why not!
