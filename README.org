#+TITLE: TScript34

** Sub-projects

- [[./P0001/][P0001]] :: Java...tokenizer, thing
  - Status: Some unit tests that pass
- [[./P0002/][P0002]] :: C# even-more-simplified interpreter
  - Status: Works; used to implement parts of MapTranslator35
- [[./P0003/][P0003]] :: Test cases
- P0004 :: Some compiler written in Janet, or something
  - Status: ???
- [[./P0005/][P0005]] :: A minimal lisp, implemented in Java
  - Status: incomplete
- [[./P0006/][P0006]] :: Tiny single-class VM challenge
  - Status: Works, but minimally useful
  - A forthlike VM using String[] to store the program
- [[./P0007/][P0007]] :: Demonstration of dynamically generated/loaded class files
  - Status: Concept proved to work.
- [[./P0008/][P0008]] :: Formerly 'Java Command Runner', but its purpose overlaps
  enough with this project, and I already have enough stray Java repos around.
  - Status: does some basic stuff
- [[./P0009/][P0009]] :: Single-class Java implementation of TScript34.2 interpreter
  - Program encoded as int[] with a table of Object[] constants
  - Stack is Object[], with Object[] { SPECIAL_MARKER, tag, ... } used to denote
    non-literal values (i.e. values represented in an indirect way, e.g.
    'value of expression X', '
  - Status: Concept proved, has some unit tests.
  - May be expanded upon to provide more operations,
    though I would still like to keep the core very small,
    so need to come up with some extension mechanism.

** Language

I should probably specify it, huh?
With test cases and stuff.

Well, maybe for now it's enough to say that the language
is intended to be compatible with PostScript.
i.e. a program that is valid in either PostScript or in TScript34
should mean the same thing and have the same result in either.
That said, some PostScript programs might not be valid TScript34 programs,
and vice-versa.

** FAQ

*** What the %!&*@ is this?

A small PostScript-based language specification along with a few implementations.

The goal is to have a very easy-to-implement cross-platform core
that can bootstrap nicer languages (e.g. scheme, more fleshed-out PostScript, etc).

*** Why PostScript and not Forth, Scheme, TCL ...

Being a concatenative stack-based language means very little 'parsing'
is needed; tokens are tokenized and fed directly to the interpreter.

Feel free to implement higher-level languages using TScript34.
Actually that's kind of its purpose.

PostScript seems like a more elegant language than Forth, with '{ procedures }'
as first-class objects, somewhat more conventional operation names,
symmetrical string syntax '(foo)' instead of '" foo"', and fewer assumptions
that it is running very close to the metal.

*** Why not use WebAssembly?

Uthgmsagrumbleidk maybe that would be a good idea?  But it would probably be slightly less 'minimal'
than what I'm going for, here.

TODO: Read https://www.javaadvent.com/2022/12/webassembly-for-the-java-geek.html

It is compelling.
