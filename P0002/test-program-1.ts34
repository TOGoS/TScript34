#TScript34.1
# Actually an op constructor, hence 'Op' instead of 'Ops'
alias push http://ns.nuke24.net/TScript34/Op/PushValue
alias push-string http://ns.nuke24.net/TScript34/Op/PushString
alias push-int32 http://ns.nuke24.net/TScript34/Op/PushInt32
alias push-float64 http://ns.nuke24.net/TScript34/Op/PushFloat64
alias array-from-stack http://ns.nuke24.net/TScript34/Ops/ArrayFromStack
alias counttomark http://ns.nuke24.net/TScript34/Ops/CountToMark
alias dict-from-stack http://ns.nuke24.net/TScript34/Ops/DictFromStack
alias def http://ns.nuke24.net/TScript34/Ops/Define
alias dup http://ns.nuke24.net/TScript34/Ops/Dup
alias exec http://ns.nuke24.net/TScript34/Ops/Exec
alias exch http://ns.nuke24.net/TScript34/Ops/Exch
alias fetch-uri http://ns.nuke24.net/TScript34/Ops/FetchUri
alias forall http://ns.nuke24.net/TScript34/Ops/ForEach
alias get http://ns.nuke24.net/TScript34/Ops/GetElement
alias pop http://ns.nuke24.net/TScript34/Ops/Pop
# Print to stdout, just like PostScripts 'print'
alias print http://ns.nuke24.net/TScript34/Ops/Print
alias println http://ns.nuke24.net/TScript34/Ops/PrintLine
alias [ http://ns.nuke24.net/TScript34/Ops/PushMark
alias << http://ns.nuke24.net/TScript34/Ops/PushMark
alias quit http://ns.nuke24.net/TScript34/Ops/Quit
alias == http://ns.nuke24.net/TScript34/Ops/PrintAsPostScriptSource
alias { http://ns.nuke24.net/TScript34/Ops/OpenProcedure
alias } http://ns.nuke24.net/TScript34/Ops/CloseProcedure
alias Decimal http://www.w3.org/2001/XMLSchema#decimal
alias Symbol http://ns.nuke24.net/TScript34/Datatypes/Symbol

push-string data:,]
{
    counttomark
    array-from-stack
    exch
    pop
}
def

push-string data:,>>
{
    counttomark
    dict-from-stack
    exch
    pop
}
def

# Demonstrate that { ... } procedures work
{
    [
        push data:,123 Decimal
        push data:,456 Decimal
    ]
    {
        push-string data:,Blah
        print
        println
    }
    forall
}
exec
quit


push-string data:,Print%20line!
println

push-string data:,Word.
push-string data:,One%20
push-string data:,Print%20
print
print
println

[
push-int32 data:,123
push-int32 data:,456
[
push-string data:,seven,%20eight,%20nine
]
]
==
# http://ns.nuke24.net/TScript34/Ops/FlattenStringListOp
# println

push-string data:,Okay%20that%20was%20cool.
println

{

}
exec


# [ (Foo) (Bar) ] 1 get =
[
push-string data:,Foo
push-string data:,Bar
counttomark
array-from-stack
push-int32 data:,1
get
println

# << (Foo) 123 (Bar) 456 >> (Bar) get =
<<
push-string data:,Foo
push-int32 data:,123
push-string data:,Bar
push-int32 data:,456
>>
==

quit

push-string data:,https%3A%2F%2Fmaps.datascience.wisc.edu%2Fmap-maker%2Fapi%2Fterrain%2Fpublic%2Fvegetation%3Fwidth%3D800%26tlx%3D-79.80120989049429%26tly%3D40.46692825268929%26brx%3D-79.77285593567697%26bry%3D40.448193641702986
# push-string data:,http://www.nuke24.net/

dup
push-string data:,Now%20let's%20download%20
print
println

push-string data:,Again,%20that's%20
print

dup
println

fetch-uri
http://ns.nuke24.net/TScript34/MapStuff/Ops/DecodePointList

push-string data:,Converting%20from%20lat/long%20to%20x/y...
println


push-float64 data:,-79.80120989049429
push-float64 data:,40.46692825268929
push-float64 data:,6365000
http://ns.nuke24.net/TScript34/MapStuff/Ops/LatLongToXYPointList
println
